<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="5/15/2021 2:55:17 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="DESKTOP-573A3AR"
  DTS:CreatorName="DESKTOP-573A3AR\ThinkBook"
  DTS:DTSID="{537CBFCC-8D56-47EF-A428-D4E02D8BA30B}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.152"
  DTS:LocaleID="1033"
  DTS:ObjectName="Package1"
  DTS:PackageType="5"
  DTS:VersionBuild="3"
  DTS:VersionGUID="{D6B726D6-8B0E-4E9F-8CC3-52BB4A713230}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[DB_Conn_TechBrothersIT]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{302BE0A6-15FB-4A1B-ACF3-50414011033A}"
      DTS:ObjectName="DB_Conn_TechBrothersIT">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=DESKTOP-573A3AR;Initial Catalog=dars25;Integrated Security=True;Application Name=SSIS-Package1-{302BE0A6-15FB-4A1B-ACF3-50414011033A}DESKTOP-573A3AR.dars251;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5DE121F4-D4D4-448F-9915-9DB1F5CAD36A}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\ThinkBook\Desktop\Tab_Customer\SourceFolder</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E79C55B7-65DE-4B40-A1B4-7382EAA4504C}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SchemaName">
      <DTS:VariableValue
        DTS:DataType="8">dbo</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{85544DF4-CBD9-454A-AFDD-0B46A2F45AF1}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="TableName">
      <DTS:VariableValue
        DTS:DataType="8">SSIS151</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{284455EB-7639-438E-A9E0-4CE0CFE77BDC}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_a7ea85a0eb78411c837da93e32c2b007"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::FolderPath,User::SchemaName,User::TableName">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_a7ea85a0eb78411c837da93e32c2b007.Properties.Settings.get_Default():ST_a7ea85a0eb78411c837da93e32c2b007.Properties.Sett" +
    "ings")]

namespace ST_a7ea85a0eb78411c837da93e32c2b007.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ST_a7ea85a0eb78411c837da93e32c2b007.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{5591ae5d-71c9-400d-84a0-4be33280ca2a}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_a7ea85a0eb78411c837da93e32c2b007</RootNamespace>
    <AssemblyName>ST_a7ea85a0eb78411c837da93e32c2b007</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptTask" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex=""></Host>
        <ProjectClient>
          <HostIdentifier>SSIS_ST150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.Data.OleDb;
using System.Data.SqlClient;
#endregion

namespace ST_a7ea85a0eb78411c837da93e32c2b007
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            String FolderPath = Dts.Variables["User::FolderPath"].Value.ToString();
            String TableName = Dts.Variables["User::TableName"].Value.ToString();
            String SchemaName = Dts.Variables["User::SchemaName"].Value.ToString();
            var directory = new DirectoryInfo(FolderPath);
            FileInfo[] files = directory.GetFiles();

            //Declare and initilize variables
            string fileFullPath = "";

            //Get one Book(Excel file at a time)
            foreach (FileInfo file in files)
            {
                fileFullPath = FolderPath + "\\" + file.Name;

                //Create Excel Connection
                string ConStr;
                string HDR;
                HDR = "YES";
                ConStr = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + fileFullPath + ";Extended Properties=\"Excel 12.0;HDR=" + HDR + ";IMEX=0\"";
                OleDbConnection cnn = new OleDbConnection(ConStr);

                //Get Sheet Name
                cnn.Open();
                DataTable dtSheet = cnn.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                string sheetname;
                sheetname = "";
                foreach (DataRow drSheet in dtSheet.Rows)
                {
                    if (drSheet["TABLE_NAME"].ToString().Contains("$"))
                    {
                        sheetname = drSheet["TABLE_NAME"].ToString();
                    }
                }

                //Load the DataTable with Sheet Data so we can get the column header
                OleDbCommand oconn = new OleDbCommand("select top 1 * from [" + sheetname + "]", cnn);
                OleDbDataAdapter adp = new OleDbDataAdapter(oconn);
                DataTable dt = new DataTable();
                adp.Fill(dt);
                cnn.Close();

                //Prepare Header columns list so we can run against Database to get matching columns for a table.
                string ExcelHeaderColumn = "";
                string SQLQueryToGetMatchingColumn = "";
                for (int i = 0; i < dt.Columns.Count; i++)
                {
                    if (i != dt.Columns.Count - 1)
                        ExcelHeaderColumn += "'" + dt.Columns[i].ColumnName + "'" + ",";
                    else
                        ExcelHeaderColumn += "'" + dt.Columns[i].ColumnName + "'";
                }

                SQLQueryToGetMatchingColumn = "select STUFF((Select  ',['+Column_Name+']' from Information_schema.Columns where Table_Name='" +
        TableName + "' and Table_SChema='" + SchemaName + "'" +
       "and Column_Name in (" + @ExcelHeaderColumn + ") for xml path('')),1,1,'') AS ColumnList";

                 MessageBox.Show(SQLQueryToGetMatchingColumn);
               MessageBox.Show(ExcelHeaderColumn);

                //USE ADO.NET Connection
                SqlConnection myADONETConnection = new SqlConnection();
                myADONETConnection = (SqlConnection)(Dts.Connections["DB_Conn_TechBrothersIT"].AcquireConnection(Dts.Transaction) as SqlConnection);

                //Get Matching Column List from SQL Server
                string SQLColumnList = "";
                SqlCommand cmd = myADONETConnection.CreateCommand();
                cmd.CommandText = SQLQueryToGetMatchingColumn;
                SQLColumnList = (string)cmd.ExecuteScalar();

                //MessageBox.Show(" Matching Columns: " + SQLColumnList);


                //Use Actual Matching Columns to get data from Excel Sheet
                OleDbConnection cnn1 = new OleDbConnection(ConStr);
                cnn1.Open();
                OleDbCommand oconn1 = new OleDbCommand("select " + SQLColumnList + " from [" + sheetname + "]", cnn1);
                OleDbDataAdapter adp1 = new OleDbDataAdapter(oconn1);
                DataTable dt1 = new DataTable();
                adp1.Fill(dt1);
                cnn1.Close();


                //Load Data from DataTable to SQL Server Table.
                using (SqlBulkCopy BC = new SqlBulkCopy(myADONETConnection))
                {
                    BC.DestinationTableName = SchemaName + "." + TableName;
                    foreach (var column in dt1.Columns)
                        BC.ColumnMappings.Add(column.ToString(), column.ToString());
                    BC.WriteToServer(dt1);
                }

            }

            // TODO: Add your code here

            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_a7ea85a0eb78411c837da93e32c2b007</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_a7ea85a0eb78411c837da93e32c2b007</msb:DisplayName>
    <msb:ProjectId>{56A9354D-5CD0-4CFC-95CD-BDE6F9444564}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_a7ea85a0eb78411c837da93e32c2b007.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_a7ea85a0eb78411c837da93e32c2b007")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_a7ea85a0eb78411c837da93e32c2b007")]
[assembly: AssemblyCopyright("Copyright @  2021")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_a7ea85a0eb78411c837da93e32c2b007.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_a7ea85a0eb78411c837da93e32c2b007.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_a7ea85a0eb78411c837da93e32c2b007.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_a7ea85a0eb78411c837da93e32c2b007.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_a7ea85a0eb78411c837da93e32c2b007.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_a7ea85a0eb78411c837da93e32c2b007.dll">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
CQMAAAD6ATMAFgAAAQAAADoAAAAFAAAABgAAAAkAAAABAAAAQwAAAAIAAAAQAAAAAQAAAAIAAAAD
AAAABAAAAAEAAAAGAAAAAQAAAAEAAAAAAHQEAQAAAAAABgALA3UGBgCaA3UGBgBXAmIGDwDpBgAA
BgCEAhcFBgDuAhcFBgDPAhcFBgCBAxcFBgArAxcFBgBEAxcFBgCbAhcFBgC2AsgDCgBfAyMECgCt
ASMEBgC2BS4ADgBzBWsADgDkAF8ADgCVBQsIBgA7BosHDgBQCF8ABgD3AKoEDgB1CAsIBgDcB6oE
BgCxBKoEBgA6AmIGBgD6BZUGBgC/BfIEEgAKAl4EEgBrAl4EEgDkAd0EBgAfAnUGCgBMBCMEFgAy
B1gBFgDuAFgBBgDaBS4ABgDLBS4ABgD9A6oEDgB2BaMFDgCKAGsABgCVAKoEDgBhBV8ADgDJAV8A
DgCaAGsADgAcBmsADgAfBqMFDgBMBV8ADgDSBF8AGgBdCGEHGgDvB2EHFgCiB1gBFgAKBlgBDgC1
AAsIDgCdAKMFDgApBQsIDgDiAwsIBgB4AaoEBgADAaoEBgBsCBcFAAAAACUAAAAAAAEAAQABABAA
xwQBADkAAQABAAAAEACcBvgGXQABAAMAAAEQAFgH+AZ5AAMABwADAQAAvgcAAGEABAAKABEAtgQx
AREAnQE1AREAwAA5AQYGVwA9AVaArgdAAVaAfQFAAVAgAAAAAIYAzQQGAAEAQCQAAAAAhhhVBgYA
AQBIJAAAAACDGFUGBgABAFAkAAAAAJMI9gVEAQEAfCQAAAAAkwiFAUkBAQCDJAAAAACTCJEBTgEB
AIskAAAAAJYI4wdUAQIAkiQAAAAAhhhVBgYAAgCaJAAAAACRGFsGWQECAAAAAQDCAwkAVQYBABEA
VQYGABkAVQYKACkAVQYQADEAVQYQADkAVQYQAEEAVQYQAEkAVQYQAFEAVQYQAFkAVQYQAGEAVQYQ
AGkAVQYGAMkAVQYGAOkAVQYVAPkAVQYGAHEAtgdCAAEBLgdIAAkBoQROABEBuANVALkA+wNZABkB
VQYQABkBPAddACEBJwFZACkB1QdjACkB1QdqAIEAVQYQADEBwgQGADkBJwdwAIEA0AB1AIkAzAd/
AFEBRwaFAJkAIQhVAKEAoQSKACkBdgePAJkANwiUAKkAAgIGAFkBVQaYAGEBVQafAIkAVQYGAGkB
nASmADEB/AEGAIkAfwesAFEBLQiyAHEBoQS2AHkBSQFZACkB1Qe9AIEBWAjFAJEAVQYGAAEBngfM
AJEBoQTSAAEBBwVVAJkBgwXZAJEApwDeAKkBQAgQAKkB6AVVALEAVQbkALEAMAEQALEARQfqALEB
hgDwALEALQb4AAEB/AcBAHEAVQYGALkAVQYGAMEBFQH+AMEBaAgHAdEAVQYNAfEAVQYGAAgAFAAn
AQgAGAAsASkAcwCUAS4ACwBsAS4AEwB1AS4AGwCUAS4AIwCdAS4AKwDGAS4AMwDGAS4AOwDGAS4A
QwCdAS4ASwDMAS4AUwDGAS4AWwDjAUMAYwAsAUkAcwCUAWEAewAsAWMAawAsARsAAwABAAQAAwAA
APoFXQEAAKUBYgEAAOcHZwECAAQAAwACAAUABQABAAYABQACAAcABwAEgAAAAQAAAH0eiWsAAAAA
AAABAAAABAAAAAAAAAAAAAAAFQF9AAAAAAAPAAAAAAAAAAAAAAAeAQQEAAAAAAQAAAAAAAAAAAAA
ABUBXwAAAAAABAAAAAAAAAAAAAAAFQGqBAAAAAAPAAAAAAAAAAAAAAAeATgAAAAAAAQAAAAAAAAA
AAAAABUBYQcAAAAAAAAAAAEAAACmBgAABQACAAAAAAAAU1RfYTdlYTg1YTBlYjc4NDExYzgzN2Rh
OTNlMzJjMmIwMDcAPE1vZHVsZT4AU3lzdGVtLklPAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdl
ZERUUwB2YWx1ZV9fAFN5c3RlbS5EYXRhAFN5c3RlbS5EYXRhLk9sZURiAG1zY29ybGliAEFkZABP
bGVEYlNjaGVtYUd1aWQAT2xlRGJDb21tYW5kAENyZWF0ZUNvbW1hbmQAU3FsQ29tbWFuZABkZWZh
dWx0SW5zdGFuY2UAR2V0T2xlRGJTY2hlbWFUYWJsZQBEYXRhVGFibGUAVmFyaWFibGUASURpc3Bv
c2FibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAZ2V0X05hbWUAc2V0X0Rl
c3RpbmF0aW9uVGFibGVOYW1lAGdldF9Db2x1bW5OYW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRz
LlJ1bnRpbWUAVHlwZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3Vs
dHVyZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UASW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJh
c2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UAQ2xvc2UARGlzcG9zZQBFZGl0b3JCcm93c2FibGVT
dGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmli
dXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5
VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3Jr
QXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0
aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9k
dWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50
cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGli
aWxpdHlBdHRyaWJ1dGUAZ2V0X1ZhbHVlAHZhbHVlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcA
U3FsQnVsa0NvcHlDb2x1bW5NYXBwaW5nAFRvU3RyaW5nAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2Ny
aXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFNjcmlwdE9i
amVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABTVF9hN2VhODVhMGViNzg0MTFjODM3ZGE5
M2UzMmMyYjAwNy5kbGwARmlsbABnZXRfSXRlbQBTeXN0ZW0ARW51bQByZXNvdXJjZU1hbgBPcGVu
AFNjcmlwdE1haW4ARGF0YUNvbHVtbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFs
aXphdGlvbgBnZXRfVHJhbnNhY3Rpb24AU3lzdGVtLlJlZmxlY3Rpb24AU3FsQnVsa0NvcHlDb2x1
bW5NYXBwaW5nQ29sbGVjdGlvbgBEYXRhQ29sdW1uQ29sbGVjdGlvbgBEYXRhUm93Q29sbGVjdGlv
bgBPbGVEYkNvbm5lY3Rpb24AQWNxdWlyZUNvbm5lY3Rpb24AU3FsQ29ubmVjdGlvbgBTeXN0ZW0u
RGF0YS5Db21tb24ARmlsZUluZm8AQ3VsdHVyZUluZm8ARmlsZVN5c3RlbUluZm8ARGlyZWN0b3J5
SW5mbwBFeGVjdXRlU2NhbGFyAGdldF9SZXNvdXJjZU1hbmFnZXIAQ29ubmVjdGlvbk1hbmFnZXIA
T2xlRGJEYXRhQWRhcHRlcgBXcml0ZVRvU2VydmVyAElFbnVtZXJhdG9yAEdldEVudW1lcmF0b3IA
LmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNl
cnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfYTdlYTg1YTBlYjc4NDExYzgzN2RhOTNlMzJjMmIw
MDcuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNUX2E3ZWE4
NWEwZWI3ODQxMWM4MzdkYTkzZTMyYzJiMDA3LlByb3BlcnRpZXMAVGFibGVzAGdldF9WYXJpYWJs
ZXMAR2V0RmlsZXMAZ2V0X0NvbHVtbk1hcHBpbmdzAFNldHRpbmdzAFN5c3RlbS5XaW5kb3dzLkZv
cm1zAENvbnRhaW5zAGdldF9Db2x1bW5zAFN5c3RlbS5Db2xsZWN0aW9ucwBnZXRfQ29ubmVjdGlv
bnMAU3VjY2VzcwBnZXRfRHRzAFNjcmlwdFJlc3VsdHMAZ2V0X1Jvd3MAQ29uY2F0AE9iamVjdABn
ZXRfRGVmYXVsdABEaWFsb2dSZXN1bHQAc2V0X1Rhc2tSZXN1bHQAU3lzdGVtLkRhdGEuU3FsQ2xp
ZW50AGdldF9DdXJyZW50AGdldF9Db3VudABNb3ZlTmV4dABzZXRfQ29tbWFuZFRleHQARGF0YVJv
dwBTaG93AE1lc3NhZ2VCb3gAZ2V0X0Fzc2VtYmx5AFNxbEJ1bGtDb3B5AAAAAAAhVQBzAGUAcgA6
ADoARgBvAGwAZABlAHIAUABhAHQAaAAAH1UAcwBlAHIAOgA6AFQAYQBiAGwAZQBOAGEAbQBlAAAh
VQBzAGUAcgA6ADoAUwBjAGgAZQBtAGEATgBhAG0AZQAAAQADXAAAB1kARQBTAABdUAByAG8AdgBp
AGQAZQByAD0ATQBpAGMAcgBvAHMAbwBmAHQALgBBAEMARQAuAE8ATABFAEQAQgAuADEAMgAuADAA
OwBEAGEAdABhACAAUwBvAHUAcgBjAGUAPQAASzsARQB4AHQAZQBuAGQAZQBkACAAUAByAG8AcABl
AHIAdABpAGUAcwA9ACIARQB4AGMAZQBsACAAMQAyAC4AMAA7AEgARABSAD0AABE7AEkATQBFAFgA
PQAwACIAABVUAEEAQgBMAEUAXwBOAEEATQBFAAADJAAAK3MAZQBsAGUAYwB0ACAAdABvAHAAIAAx
ACAAKgAgAGYAcgBvAG0AIABbAAADXQAAAycAAQUnACwAAYC7cwBlAGwAZQBjAHQAIABTAFQAVQBG
AEYAKAAoAFMAZQBsAGUAYwB0ACAAIAAnACwAWwAnACsAQwBvAGwAdQBtAG4AXwBOAGEAbQBlACsA
JwBdACcAIABmAHIAbwBtACAASQBuAGYAbwByAG0AYQB0AGkAbwBuAF8AcwBjAGgAZQBtAGEALgBD
AG8AbAB1AG0AbgBzACAAdwBoAGUAcgBlACAAVABhAGIAbABlAF8ATgBhAG0AZQA9ACcAASknACAA
YQBuAGQAIABUAGEAYgBsAGUAXwBTAEMAaABlAG0AYQA9ACcAASsnAGEAbgBkACAAQwBvAGwAdQBt
AG4AXwBOAGEAbQBlACAAaQBuACAAKAABUykAIABmAG8AcgAgAHgAbQBsACAAcABhAHQAaAAoACcA
JwApACkALAAxACwAMQAsACcAJwApACAAQQBTACAAQwBvAGwAdQBtAG4ATABpAHMAdAABLUQAQgBf
AEMAbwBuAG4AXwBUAGUAYwBoAEIAcgBvAHQAaABlAHIAcwBJAFQAAA9zAGUAbABlAGMAdAAgAAAP
IABmAHIAbwBtACAAWwAAAy4AAHFTAFQAXwBhADcAZQBhADgANQBhADAAZQBiADcAOAA0ADEAMQBj
ADgAMwA3AGQAYQA5ADMAZQAzADIAYwAyAGIAMAAwADcALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4A
UgBlAHMAbwB1AHIAYwBlAHMAAAAA7zblr0Dtg0ajZ6vHrUx0FAAEIAEBCAMgAAEFIAEBEREEIAEB
DgUgAQERcSYHGA4ODg4dEj0IEj0ODhJBDhJFDg4SSQ4SQRJFEk0SURJVCBJZHAUgABKAgQUgABKA
hQYgARKAiRwDIAAcAyAADgUgAB0SPQYAAw4ODg4FAAEOHQ4EBhGAoQkgAhJFEYChHRwFIAASgKUE
IAASTQQgARwOBCABAg4DIAACBiACAQ4SQQYgAQESgK0FIAEIEkUFIAASgLkDIAAIBiABEoC9CAcA
BA4ODg4OBgABEYDFDgUgABKAyQYgARKAzRwEIAEcHAUgABKA0QUgAQESSQUgABKA2QcgAhKA3Q4O
BSABARJFCAABEoDhEYDlBSAAEoDpByACAQ4SgOkIt3pcVhk04IkIiYRdzYCAzJEEAAAAAAQBAAAA
AwYSaQMGEm0DBhIQAgYIAwYRFAQAABJpBAAAEm0FAAEBEm0EAAASEAMAAAEECAASaQQIABJtBAgA
EhAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NU
X2E3ZWE4NWEwZWI3ODQxMWM4MzdkYTkzZTMyYzJiMDA3AAAFAQAAAAAWAQARQ29weXJpZ2h0IEAg
IDIwMjEAAEkBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuNwEAVA4URnJhbWV3b3JrRGlzcGxh
eU5hbWUSLk5FVCBGcmFtZXdvcmsgNC43AAAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3Vy
Y2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5l
dXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5S
dW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAOw5AAAAAAAAAAAAAAY6AAAA
IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD4OQAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUu
ZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB
ABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAA
WEAAABoEAAAAAAAAAAAAABoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9
BO/+AAABAAAAAQCJa30eAAABAIlrfR4/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEA
VgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAA
AAAAsAR6AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAAMAAwADAA
NABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBO
AGEAbQBlAAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMA
VABfAGEANwBlAGEAOAA1AGEAMABlAGIANwA4ADQAMQAxAGMAOAAzADcAZABhADkAMwBlADMAMgBj
ADIAYgAwADAANwAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA3ADgA
MAA1AC4AMgA3ADUAMgA5AAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABf
AGEANwBlAGEAOAA1AGEAMABlAGIANwA4ADQAMQAxAGMAOAAzADcAZABhADkAMwBlADMAMgBjADIA
YgAwADAANwAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBv
AHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAAMgAxAAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQA
ZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBl
AAAAUwBUAF8AYQA3AGUAYQA4ADUAYQAwAGUAYgA3ADgANAAxADEAYwA4ADMANwBkAGEAOQAzAGUA
MwAyAGMAMgBiADAAMAA3AC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAA
AFMAVABfAGEANwBlAGEAOAA1AGEAMABlAGIANwA4ADQAMQAxAGMAOAAzADcAZABhADkAMwBlADMA
MgBjADIAYgAwADAANwAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAw
AC4ANwA4ADAANQAuADIANwA1ADIAOQAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIA
cwBpAG8AbgAAADEALgAwAC4ANwA4ADAANQAuADIANwA1ADIAOQAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAwAAAAYOgAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="130.4,41.6"
          Id="Package\Script Task"
          TopLeft="249.944434731095,157.022223426413" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>